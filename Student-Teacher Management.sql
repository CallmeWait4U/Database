----------------Create table------------------
CREATE TABLE STUDENT
(
    STU_ID              INT             NOT NULL,
    FIRST_NAME          CHAR(10)        NOT NULL,
    MINIT               NVARCHAR2(15)   NULL,
    LAST_NAME           CHAR(10)        NOT NULL,
    ADDRESS             NVARCHAR2(50)   NOT NULL,
    GPA                 FLOAT           NOT NULL,
    GRADE               INT             NOT NULL,
    CLASS_NAME          CHAR(10)        NOT NULL,
    CONSTRAINT PK_STUDENT PRIMARY KEY(STU_ID)
);

CREATE TABLE TEACHER
(
    TEACHER_ID          CHAR(7)         NOT NULL,
    FIRST_NAME          CHAR(10)        NOT NULL,
    MINIT               NVARCHAR2(15)   NULL,
    LAST_NAME           CHAR(10)        NOT NULL,
    SALARY              INT             NOT NULL,
    DP_NAME             NVARCHAR2(50)   NOT NULL,
    CONSTRAINT PK_TEACHER PRIMARY KEY(TEACHER_ID)
);

CREATE TABLE DEPENDENT_STU
(
    STU_ID              INT             NOT NULL,
    DEPENDENT_NAME      NVARCHAR2(50)   NOT NULL,
    PHONE_NUM           CHAR(10)        NOT NULL,
    RELATIONSHIP        NVARCHAR2(15)   NOT NULL,
    CONSTRAINT PK_DEPENDENT_STU PRIMARY KEY(STU_ID,DEPENDENT_NAME)
);

CREATE TABLE DEPARTMENT
(
    DP_NAME             NVARCHAR2(50)   NOT NULL,
    MANAGER_ID          CHAR(7)         NULL,
    CONSTRAINT PK_DEPARTMENT PRIMARY KEY(DP_NAME)
);

CREATE TABLE CLASS_STU
(
    CLASS_NAME          CHAR(10)        NOT NULL,
    SIZE_MEM            INT             NOT NULL,
    LEADER_ID           INT             NULL,
    HOMEROOM_TEACHER_ID CHAR(7)         NOT NULL,
    DP_NAME             NVARCHAR2(50)   NOT NULL,
    CONSTRAINT PK_CLASS_STU PRIMARY KEY(CLASS_NAME)
);

CREATE TABLE COURSE
(
    COURSE_NO           CHAR(10)        NOT NULL,
    TITLE               NVARCHAR2(50)   NOT NULL,
    CREDITS             INT             NOT NULL,
    CONSTRAINT PK_COURSE PRIMARY KEY(COURSE_NO)
);

CREATE TABLE COURSE_OFFERING
(
    CO_NAME             CHAR(10)        NOT NULL,
    CO_TYPE             NVARCHAR2(10)   NOT NULL,
    TEACHER_ID          CHAR(7)         NOT NULL,
    COURSE_NO           CHAR(10)        NOT NULL,
    NUM_STU             INT             NOT NULL,
    TIME_STUDY          NVARCHAR2(50)   NOT NULL,
    WEEK_DAY            NVARCHAR2(10)   NOT NULL,
    SEMESTER            CHAR(5)         NOT NULL,
    ROOM                NVARCHAR2(10)   NOT NULL,
    CONSTRAINT PK_COURSE_OFFERING PRIMARY KEY(CO_NAME,CO_TYPE,TEACHER_ID,COURSE_NO)
);

CREATE TABLE REGISTER_COURSE
(
    STU_ID              INT             NOT NULL,
    COURSE_NO           CHAR(10)        NOT NULL,
    SCORES              FLOAT           NULL,
    CONSTRAINT PK_REGISTER_COURSE PRIMARY KEY(STU_ID,COURSE_NO)
);

CREATE TABLE PREREQUISITE
(
    COURSE_NO           CHAR(10)        NOT NULL,
    PREREQUISITE_NO     CHAR(10)        NOT NULL,
    CONSTRAINT PK_PREREQUISITE PRIMARY KEY(COURSE_NO,PREREQUISITE_NO)
);
-------------Create foreign keys---------------
ALTER TABLE STUDENT
    ADD CONSTRAINT FK_STUDENT_CLASS_NAME FOREIGN KEY(CLASS_NAME) REFERENCES CLASS_STU(CLASS_NAME);

ALTER TABLE TEACHER
    ADD CONSTRAINT FK_TEACHER_DP_NAME FOREIGN KEY(DP_NAME) REFERENCES DEPARTMENT(DP_NAME);

ALTER TABLE DEPENDENT_STU
    ADD CONSTRAINT FK_DEPENDENT_STU_STU_ID FOREIGN KEY(STU_ID) REFERENCES STUDENT(STU_ID);

--ALTER TABLE DEPARTMENT
    --ADD CONSTRAINT FK_DEPARTMENT_MANAGER_ID FOREIGN KEY(MANAGER_ID) REFERENCES TEACHER(TEACHER_ID);
    
ALTER TABLE CLASS_STU
    ADD
        (
            CONSTRAINT FK_CLASS_STU_HOMEROOM_TEACHER_ID FOREIGN KEY(HOMEROOM_TEACHER_ID) REFERENCES TEACHER(TEACHER_ID),
            CONSTRAINT FK_CLASS_STU_DP_NAME FOREIGN KEY(DP_NAME) REFERENCES DEPARTMENT(DP_NAME)
        );

ALTER TABLE COURSE_OFFERING
    ADD
        (
            CONSTRAINT FK_COURSE_OFFERING_TEACHER_ID FOREIGN KEY(TEACHER_ID) REFERENCES TEACHER(TEACHER_ID),
            CONSTRAINT FK_COURSE_OFFERING_COURSE_NO FOREIGN KEY(COURSE_NO) REFERENCES COURSE(COURSE_NO)
        );

ALTER TABLE REGISTER_COURSE
    ADD
        (
            CONSTRAINT FK_REGISTER_COURSE_STU_ID FOREIGN KEY(STU_ID) REFERENCES STUDENT(STU_ID),
            CONSTRAINT FK_REGISTER_COURSE_COURSE_NO FOREIGN KEY(COURSE_NO) REFERENCES COURSE(COURSE_NO)
        );

ALTER TABLE PREREQUISITE
    ADD
        (
            CONSTRAINT FK_PREREQUISITE_COURSE_NO FOREIGN KEY(COURSE_NO) REFERENCES COURSE(COURSE_NO),
            CONSTRAINT FK_PREREQUISITE_PREREQUISITE_NO FOREIGN KEY(PREREQUISITE_NO) REFERENCES COURSE(COURSE_NO)
        );
        
        
        
-------------Insert data-----------
SET CONSTRAINT ALL DEFERRED;

INSERT INTO DEPARTMENT (DP_NAME,MANAGER_ID) VALUES ('Khoa hoc va Ky thuat May tinh','0000001');
INSERT INTO DEPARTMENT (DP_NAME,MANAGER_ID) VALUES ('Dien Dien tu','0100001');
INSERT INTO DEPARTMENT (DP_NAME,MANAGER_ID) VALUES ('Co khi','0200001');
INSERT INTO DEPARTMENT (DP_NAME,MANAGER_ID) VALUES ('Quan ly Cong nghiep','0300001');
INSERT INTO DEPARTMENT (DP_NAME,MANAGER_ID) VALUES ('Khoa hoc Ung dung','0400001');
INSERT INTO DEPARTMENT (DP_NAME,MANAGER_ID) VALUES ('Ky thuat Hoa hoc','0500001');

INSERT INTO TEACHER (TEACHER_ID,FIRST_NAME,MINIT,LAST_NAME,SALARY,DP_NAME) VALUES ('0000001','PHAM','TRAN','VU',10500000,'Khoa hoc va Ky thuat May tinh');
INSERT INTO TEACHER (TEACHER_ID,FIRST_NAME,MINIT,LAST_NAME,SALARY,DP_NAME) VALUES ('0000009','TRUONG','THI THAI','MINH',2500000,'Khoa hoc va Ky thuat May tinh');
INSERT INTO TEACHER (TEACHER_ID,FIRST_NAME,MINIT,LAST_NAME,SALARY,DP_NAME) VALUES ('0000010','PHAN','TRONG','NHAT',2700000,'Khoa hoc va Ky thuat May tinh');
INSERT INTO TEACHER (TEACHER_ID,FIRST_NAME,MINIT,LAST_NAME,SALARY,DP_NAME) VALUES ('0100001','DO','HONG','TUAN',8500000,'Dien Dien tu');
INSERT INTO TEACHER (TEACHER_ID,FIRST_NAME,MINIT,LAST_NAME,SALARY,DP_NAME) VALUES ('0200001','NGUYEN','HUU','LOC',4500000,'Co khi');
INSERT INTO TEACHER (TEACHER_ID,FIRST_NAME,MINIT,LAST_NAME,SALARY,DP_NAME) VALUES ('0300001','DUONG','NHU','HUNG',7500000,'Quan ly Cong nghiep');
INSERT INTO TEACHER (TEACHER_ID,FIRST_NAME,MINIT,LAST_NAME,SALARY,DP_NAME) VALUES ('0400001','TRUONG','TICH','THIEN',5500000,'Khoa hoc Ung dung');
INSERT INTO TEACHER (TEACHER_ID,FIRST_NAME,MINIT,LAST_NAME,SALARY,DP_NAME) VALUES ('0500001','PHAN','THANH SON','NAM',9500000,'Ky thuat Hoa hoc');

INSERT INTO STUDENT (STU_ID,FIRST_NAME,MINIT,LAST_NAME,ADDRESS,GPA,GRADE,CLASS_NAME) VALUES (2012021,'BUI','TRAN NHAT','THANH','Ben Tre',0,2020,'MT20KH02');
INSERT INTO STUDENT (STU_ID,FIRST_NAME,MINIT,LAST_NAME,ADDRESS,GPA,GRADE,CLASS_NAME) VALUES (2011679,'LE','HUY','NGO','Dac Lak',0,2020,'MT20KH02');
INSERT INTO STUDENT (STU_ID,FIRST_NAME,MINIT,LAST_NAME,ADDRESS,GPA,GRADE,CLASS_NAME) VALUES (2014587,'BUI','NGUYEN QUOC','THINH','Ben Tre',0,2020,'CK20CDT4');
INSERT INTO STUDENT (STU_ID,FIRST_NAME,MINIT,LAST_NAME,ADDRESS,GPA,GRADE,CLASS_NAME) VALUES (2012738,'LU','TRONG','CHINH','Dac Lak',0,2020,'MT20KH02');
INSERT INTO STUDENT (STU_ID,FIRST_NAME,MINIT,LAST_NAME,ADDRESS,GPA,GRADE,CLASS_NAME) VALUES (2010924,'TRAN','LONG','BIEN','Bac Lieu',0,2020,'MT20KH02');
INSERT INTO STUDENT (STU_ID,FIRST_NAME,MINIT,LAST_NAME,ADDRESS,GPA,GRADE,CLASS_NAME) VALUES (2010863,'NGUYEN','NHAT','ANH','Bien Hoa',0,2020,'MT20KH02');
INSERT INTO STUDENT (STU_ID,FIRST_NAME,MINIT,LAST_NAME,ADDRESS,GPA,GRADE,CLASS_NAME) VALUES (2012532,'PHAM','HONG','THINH','Binh Dinh',0,2020,'MT20KH02');
INSERT INTO STUDENT (STU_ID,FIRST_NAME,MINIT,LAST_NAME,ADDRESS,GPA,GRADE,CLASS_NAME) VALUES (2012119,'TRAN','KHANG','THINH','TP Ho Chi Minh',0,2020,'MT20KH02');

INSERT INTO CLASS_STU (CLASS_NAME,SIZE_MEM,LEADER_ID,HOMEROOM_TEACHER_ID,DP_NAME) VALUES ('MT20KH02',60,2010863,'0000009','Khoa hoc va Ky thuat May tinh');
INSERT INTO CLASS_STU (CLASS_NAME,SIZE_MEM,LEADER_ID,HOMEROOM_TEACHER_ID,DP_NAME) VALUES ('CK20CDT4',60,2014587,'0200001','Co khi');

INSERT INTO DEPENDENT_STU (STU_ID,DEPENDENT_NAME,PHONE_NUM,RELATIONSHIP) VALUES (2012021,'BUI TRAN PHUONG THAO','0987654321','Em ruot');

INSERT INTO COURSE (COURSE_NO,TITLE,CREDITS) VALUES ('MT1003','Giai tich 1',4);
INSERT INTO COURSE (COURSE_NO,TITLE,CREDITS) VALUES ('MT1005','Giai tich 2',4);
INSERT INTO COURSE (COURSE_NO,TITLE,CREDITS) VALUES ('PH1003','Vat ly 1',4);
INSERT INTO COURSE (COURSE_NO,TITLE,CREDITS) VALUES ('PH1005','Vat ly 2',4);
INSERT INTO COURSE (COURSE_NO,TITLE,CREDITS) VALUES ('SP1039','Lich su Dang Cong san Viet Nam',2);
INSERT INTO COURSE (COURSE_NO,TITLE,CREDITS) VALUES ('MI1003','Giao duc quoc phong',0);
INSERT INTO COURSE (COURSE_NO,TITLE,CREDITS) VALUES ('LA1003','Anh van 1',2);
INSERT INTO COURSE (COURSE_NO,TITLE,CREDITS) VALUES ('CO3093','Mang may tinh',3);
INSERT INTO COURSE (COURSE_NO,TITLE,CREDITS) VALUES ('pe1003','Giao duc the chat 1',0);
INSERT INTO COURSE (COURSE_NO,TITLE,CREDITS) VALUES ('CO2013','He co so du lieu',4);
INSERT INTO COURSE (COURSE_NO,TITLE,CREDITS) VALUES ('SP1035','Chu nghia xa hoi khoa hoc',2);

INSERT INTO COURSE_OFFERING (CO_NAME,CO_TYPE,TEACHER_ID,COURSE_NO,NUM_STU,TIME_STUDY,WEEK_DAY,SEMESTER,ROOM)
    VALUES ('L05','Li thuyet','0000001','CO3093',40,'7:00 - 8:50','Thu 5','221','H3 302');
INSERT INTO COURSE_OFFERING (CO_NAME,CO_TYPE,TEACHER_ID,COURSE_NO,NUM_STU,TIME_STUDY,WEEK_DAY,SEMESTER,ROOM)
    VALUES ('L05','Li thuyet','0000010','CO2013',40,'9:00 - 11:50','Thu 5','221','H6 411');
    
INSERT INTO PREREQUISITE (COURSE_NO,PREREQUISITE_NO) VALUES ('PH1005','PH1003');
INSERT INTO PREREQUISITE (COURSE_NO,PREREQUISITE_NO) VALUES ('SP1039','SP1035');

INSERT INTO REGISTER_COURSE (STU_ID,COURSE_NO,SCORES) VALUES (2012021,'MT1003',7.0);
INSERT INTO REGISTER_COURSE (STU_ID,COURSE_NO,SCORES) VALUES (2012738,'SP1039',7.9);
INSERT INTO REGISTER_COURSE (STU_ID,COURSE_NO,SCORES) VALUES (2014587,'PH1003',8.2);
INSERT INTO REGISTER_COURSE (STU_ID,COURSE_NO,SCORES) VALUES (2012021,'SP1035',4.3);
INSERT INTO REGISTER_COURSE (STU_ID,COURSE_NO,SCORES) VALUES (2012532,'CO2013',6.6);

COMMIT;



-------------Create Function-----------
/*
    Input: Ma so sinh vien
    Output: Tinh diem GPA cua sinh vien do
*/
CREATE OR REPLACE FUNCTION FT_TinhDiemGPA(MSSV INT) RETURN FLOAT
AS
    CURSOR TEMP IS SELECT COURSE_NO,SCORES FROM REGISTER_COURSE WHERE STU_ID = MSSV;
    p_COURSE    CHAR(10);
    p_SCORES    FLOAT;
    p_CREDITS   INT;
    GPA         FLOAT := 0;
    SUM_CRE     INT := 0;
BEGIN
    OPEN TEMP;
    LOOP
        FETCH TEMP INTO p_COURSE,p_SCORES;
        EXIT WHEN TEMP%NOTFOUND;
        SELECT CREDITS INTO p_CREDITS FROM COURSE WHERE COURSE_NO = p_COURSE;
        SUM_CRE := SUM_CRE + p_CREDITS;
        GPA := GPA + p_SCORES*p_CREDITS;
    END LOOP;
    CLOSE TEMP;
    RETURN GPA/SUM_CRE;
END FT_TinhDiemGPA;
/
DECLARE
    MSSV STUDENT.STU_ID%TYPE := &Nhap_MSSV;
BEGIN
    DBMS_OUTPUT.PUT_LINE('GPA CUA SINH VIEN MA SO ' || MSSV || 'LA : ' || FT_TinhDiemGPA(MSSV));
END;

/*
    Input: Ma so sinh vien
    Output: Xep loai neu
        Diem GPA >= 8 va diem GPA < 10: Gioi
        Diem GPA >= 7: Kha
        Diem GPA >= 5: Trung binh
        Con lai: Kem
*/
CREATE OR REPLACE FUNCTION FT_XepLoai(MSSV INT) RETURN NVARCHAR2
AS
    GPA FLOAT;
    XL NVARCHAR2(20);
BEGIN
    GPA := FT_TinhDiemGPA(MSSV);
    IF (GPA >= 8) AND (GPA <= 10) THEN
        XL := 'GIOI';
    ELSIF (GPA >= 7) THEN
        XL := 'KHA';
    ELSIF (GPA >= 5) THEN
        XL := 'TRUNG BINH';
    ELSE
        XL := 'KEM';
    END IF;
    RETURN XL;
END FT_XepLoai;
/
DECLARE
    MSSV STUDENT.STU_ID%TYPE := &Nhap_MSSV;
BEGIN
    DBMS_OUTPUT.PUT_LINE('HOC LUC CUA SINH VIEN MA SO ' || MSSV || 'LA : ' || FT_XepLoai(MSSV));
END;

/*
    Input: STU_ID, COURSE_NO
    Truoc khi them du lieu vao bang REGISTER_COURSE, kiem tra cac mon tien quyet da hoc chua.
    Output: 1 neu sinh vien da hoc xong cac mon tien quyet hoac 0 neu chua hoc het.
*/
CREATE OR REPLACE FUNCTION FT_KiemTraMonTienQuyet(p_MSSV INT, p_COURSE CHAR) RETURN CHAR
AS
    CURSOR TEMP1 IS SELECT PREREQUISITE_NO FROM PREREQUISITE WHERE COURSE_NO = p_COURSE;
    CURSOR TEMP2 IS SELECT COURSE_NO FROM REGISTER_COURSE WHERE STU_ID = p_MSSV;
    p_MON CHAR(10);
    p_PRERE CHAR(10);
    A INT := 0;
    B INT := 0;
    C INT := -1;
BEGIN
    OPEN TEMP1;
    OPEN TEMP2;
    LOOP
        FETCH TEMP1 INTO p_PRERE;
        EXIT WHEN TEMP1%NOTFOUND OR (A = C);
        C := A;
        LOOP
            FETCH TEMP2 INTO p_MON;
            EXIT WHEN TEMP2%NOTFOUND OR (A != B);
            IF (p_PRERE = p_MON) THEN
                B := B + 1;
            END IF;
        END LOOP;
        IF (A != B) THEN A := B;
        ELSE
            RETURN p_PRERE;
        END IF;
    END LOOP;
    CLOSE TEMP1;
    CLOSE TEMP2;
    RETURN 'OK';
END FT_KiemTraMonTienQuyet;


----------------Create Procedure-------------
/*
    Tham so dua vao la STU_ID, FIRST_NAME, MINIT, LAST_NAME, ADDRESS, GRADE, CLASS_NAME.
    Truoc khi chen du lieu can kiem tra STU_ID da co san trong bang STUDENT hay chua, neu da co thi thong bao loi
    hay CLASS_NAME da ton tai trong bang CLASS chua, neu chua tra ra thong bao loi.
*/
CREATE OR REPLACE PROCEDURE PCD_ThemSinhVien
(p_MSSV IN INT, p_FNAME IN CHAR, p_MINIT IN NVARCHAR2, p_LNAME IN CHAR, p_ADDR IN NVARCHAR2, p_GPA IN OUT INT, p_GRADE IN INT, p_CLASS IN CHAR)
AS
    PK_STUDENT EXCEPTION;
    PRAGMA EXCEPTION_INIT(PK_STUDENT, -00001);
    FK_STUDENT_CLASS_NAME EXCEPTION;
    PRAGMA EXCEPTION_INIT(FK_STUDENT_CLASS_NAME, -02291);
BEGIN
    p_GPA := FT_TinhDiemGPA(p_MSSV);
    INSERT INTO STUDENT(STU_ID,FIRST_NAME,MINIT,LAST_NAME,ADDRESS,GPA,GRADE,CLASS_NAME)
        VALUES(p_MSSV,p_FNAME,p_MINIT,p_LNAME,p_ADDR,p_GPA,p_GRADE,p_CLASS);
    EXCEPTION
        WHEN FK_STUDENT_CLASS_NAME THEN
            DBMS_OUTPUT.PUT_LINE('Ma so lop: ' || p_CLASS || ' nay khong co trong bang CLASS');
        WHEN PK_STUDENT THEN
            DBMS_OUTPUT.PUT_LINE('Ma so sinh bien: ' || p_MSSV || ' nay da co trong bang STUDENT');
END PCD_ThemSinhVien;
/
EXECUTE PCD_ThemSinhVien(2012021,'BUI','TRAN NHAT','THANH','Ben Tre',0,2020,'MT20KH02');
/
/*
    Tham so dua vao la TEACHER_ID, FIRST_NAME, MINIT, LAST_NAME, SALARY, DP_NAME.
    Truoc khi chen du lieu can kiem tra TEACHER_ID da co san trong bang TEACHER hay chua, neu da co thi thong bao loi
    hay DP_NAME da ton tai trong bang DEPARTMENT chua, neu chua tra ra thong bao loi.
*/
CREATE OR REPLACE PROCEDURE PCD_ThemGiangVien
(p_MSGV IN CHAR, p_FNAME IN CHAR, p_MINIT IN NVARCHAR2, p_LNAME IN CHAR, p_SALARY IN INT, p_DP_NAME IN NVARCHAR2)
AS
    PK_TEACHER EXCEPTION;
    PRAGMA EXCEPTION_INIT(PK_TEACHER, -00001);
    FK_TEACHER_DP_NAME EXCEPTION;
    PRAGMA EXCEPTION_INIT(FK_TEACHER_DP_NAME, -02291);
BEGIN
    INSERT INTO TEACHER(TEACHER_ID,FIRST_NAME,MINIT,LAST_NAME,SALARY,DP_NAME)
        VALUES(p_MSGV,p_FNAME,p_MINIT,p_LNAME,p_SALARY,p_DP_NAME);
    EXCEPTION
        WHEN FK_TEACHER_DP_NAME THEN
            DBMS_OUTPUT.PUT_LINE('Ten Khoa: ' || p_DP_NAME || ' nay khong co trong bang DEPARTMENT');
        WHEN PK_TEACHER THEN
            DBMS_OUTPUT.PUT_LINE('Ma giang vien: ' || p_MSGV || ' nay da co trong bang TEACHER');
END PCD_ThemGiangVien;
/
EXECUTE PCD_ThemGiangVien('0000011','BUI','TIEN','DUC',9000000,'Khoa hoc va Ky thuat May tinh');
/
/*
    Tham so dua vao la STU_ID, DEPENDENT_NAME, PHONE_NUM, RELATIONSHIP
    Truoc khi chen du lieu can kiem tra STU_ID da co san trong bang STUDENT hay chua, neu chua co thi thong bao loi.
*/
CREATE OR REPLACE PROCEDURE PCD_ThemNguoiThan
(p_MSSV IN INT, p_NAME IN NVARCHAR2, p_PHONE_NUM IN CHAR, p_RELATIONSHIP IN NVARCHAR2)
AS
    FK_DEPENDENT_STU_STU_ID EXCEPTION;
    PRAGMA EXCEPTION_INIT(FK_DEPENDENT_STU_STU_ID, -02291);
BEGIN
    INSERT INTO DEPENDENT_STU(STU_ID,DEPENDENT_NAME,PHONE_NUM,RELATIONSHIP)
        VALUES(p_MSSV,p_NAME,p_PHONE_NUM,p_RELATIONSHIP);
    EXCEPTION
        WHEN FK_DEPENDENT_STU_STU_ID THEN
            DBMS_OUTPUT.PUT_LINE('Ma so sinh vien: ' || p_MSSV || ' nay khong co trong bang STUDENT');
END PCD_ThemNguoiThan;
/
EXECUTE PCD_ThemNguoiThan(2012021,'BUI HUU THO','0123456789','Cha ruot');
/
/*
    Them so dua vao la DP_NAME, MANAGER_ID
    Truoc khi chen du lieu can kiem tra DP_NAME da co san trong bang DEPARTMENT hay chua, neu da co thi thong bao loi.
*/
CREATE OR REPLACE PROCEDURE PCD_ThemKhoa(p_NAME IN NVARCHAR2, p_MANAGER IN CHAR)
AS
    PK_DEPARTMENT EXCEPTION;
    PRAGMA EXCEPTION_INIT(PK_DEPARTMENT, -00001);
    FK_DEPARTMENT_MANAGER_ID EXCEPTION;
    PRAGMA EXCEPTION_INIT(FK_DEPARTMENT_MANAGER_ID, -02291);
BEGIN
    INSERT INTO DEPARTMENT(DP_NAME,MANAGER_ID)
        VALUES(p_NAME,p_MANAGER);
    EXCEPTION
        WHEN PK_DEPARTMENT THEN
            DBMS_OUTPUT.PUT_LINE('Ten Khoa: ' || p_NAME || ' nay da co trong bang DEPARTMENT');
END PCD_ThemKhoa;
/
EXECUTE PCD_ThemKhoa('Khoa hoc va Ky thuat May tinh','0000001');
/
/*
    Them so dua vao la CLASS_NAME, SIZE_MEM, LEADER_ID, HOMEROOM_TEACHER_ID, DP_NAME
    Truoc khi chen du lieu can kiem tra CLASS_NAME da co san trong bang CLASS hay chua, neu da co thi thong bao loi
    hay HOMEROOM_TEACHER_ID da co san trong bang TEACHER hay chua, neu chua co thi thong bao loi
    hay DP_NAME da co san trong bang DEPARTMENT hay chua, neu chua co thi thong bao loi.
*/
CREATE OR REPLACE PROCEDURE PCD_ThemLop(p_CLASS IN NVARCHAR2, p_SIZE IN INT, p_LEADER IN INT, p_TEACHER IN CHAR, p_DP IN NVARCHAR2)
AS
    PK_CLASS_STU EXCEPTION;
    PRAGMA EXCEPTION_INIT(PK_CLASS_STU, -00001);
    FK_CLASS_STU_HOMEROOM_TEACHER_ID EXCEPTION;
    PRAGMA EXCEPTION_INIT(FK_CLASS_STU_HOMEROOM_TEACHER_ID, -02291);
    FK_CLASS_STU_DP_NAME EXCEPTION;
    PRAGMA EXCEPTION_INIT(FK_CLASS_STU_DP_NAME, -02292);
BEGIN
    INSERT INTO CLASS_STU(CLASS_NAME,SIZE_MEM,LEADER_ID,HOMEROOM_TEACHER_ID,DP_NAME)
        VALUES(p_CLASS,p_SIZE,p_LEADER,p_TEACHER,p_DP);
    EXCEPTION
        WHEN FK_CLASS_STU_HOMEROOM_TEACHER_ID THEN
            DBMS_OUTPUT.PUT_LINE('Ma so giang vien: ' || p_TEACHER || ' nay khong co trong bang TEACHER');
        WHEN FK_CLASS_STU_DP_NAME THEN
            DBMS_OUTPUT.PUT_LINE('Ten Khoa: ' || p_DP || ' nay khong co trong bang DEPARTMENT');
        WHEN PK_CLASS_STU THEN
            DBMS_OUTPUT.PUT_LINE('Ten Lop: ' || p_CLASS || ' nay da co trong bang CLASS_STU');
END PCD_ThemLop;
/
EXECUTE PCD_ThemLop('MT20KH02',60,2012051,'0000009','Khoa hoc va Ky thuat May tinh');
/*
    Them so dua vao la COURSE_NO, TITLE, CREDITS
    Truoc khi chen du lieu can kiem tra COURSE_NO da co san trong bang COURSE hay chua, neu da co thi thong bao loi.
*/
CREATE OR REPLACE PROCEDURE PCD_ThemMonHoc(p_COURSE IN CHAR, p_TITLE IN NVARCHAR2, p_CREDITS IN INT)
AS
    PK_COURSE EXCEPTION;
    PRAGMA EXCEPTION_INIT(PK_COURSE, -000001);
BEGIN
    INSERT INTO COURSE(COURSE_NO,TITLE,CREDITS) VALUES(p_COURSE,p_TITLE,p_CREDITS);
    EXCEPTION
        WHEN PK_COURSE THEN
            DBMS_OUTPUT.PUT_LINE('Ma mon hoc: ' || p_COURSE || ' nay da co trong bang COURSE');
END PCD_ThemMonHoc;
/
EXECUTE PCD_ThemMonHoc('MT1003','Giai tich 1',4);
/*
    Them so dua vao la CO_NAME, CO_TYPE, TEACHER_ID, COURSE_NO, NUM_STU, TIME_STUDY, WEEK_DAY, SEMESTER, ROOM
    Truoc khi chen du lieu can kiem tra TEACHER_ID da co san trong bang TEACHER hay chua, neu chua co thi thong bao loi
    hay COURSE_NO da co san trong bang COURSE hay chua, neu chua co thi thong bao loi.
*/
CREATE OR REPLACE PROCEDURE PCD_ThemKhoaHoc
(p_NAME IN CHAR, p_TYPE IN NVARCHAR2, p_TEACHER IN CHAR, p_COURSE IN CHAR, p_NUM IN INT,
p_TIME IN NVARCHAR2, p_DAY IN NVARCHAR2, p_SEM IN INT, p_ROOM IN NVARCHAR2)
AS
    FK_COURSE_OFFERING_TEACHER_ID EXCEPTION;
    PRAGMA EXCEPTION_INIT(FK_COURSE_OFFERING_TEACHER_ID, -02291);
    FK_COURSE_OFFERING_COURSE_NO EXCEPTION;
    PRAGMA EXCEPTION_INIT(FK_COURSE_OFFERING_COURSE_NO, -02292);
BEGIN
    INSERT INTO COURSE_OFFERING(CO_NAME,CO_TYPE,TEACHER_ID,COURSE_NO,NUM_STU,TIME_STUDY,WEEK_DAY,SEMESTER,ROOM)
        VALUES(p_NAME,p_TYPE,p_TEACHER,p_COURSE,p_NUM,p_TIME,p_DAY,p_SEM,p_ROOM);
    EXCEPTION
        WHEN FK_COURSE_OFFERING_TEACHER_ID THEN
            DBMS_OUTPUT.PUT_LINE('Ma so giang vien:' || p_TEACHER || ' nay khong co trong bang TEACHER');
        WHEN FK_COURSE_OFFERING_COURSE_NO THEN
            DBMS_OUTPUT.PUT_LINE('Ma mon hoc: ' || p_COURSE || 'nay khong co trong bang COURSE');
END PCD_ThemKhoaHoc;
/
EXECUTE PCD_ThemKhoaHoc('L10','Thuc hanh','0000011','CO2014',30,'13:00 - 17:50','Thu 3',221,'H6 603');
/
/*
    Them so dua vao la STU_ID, COURSE_NO, SCORES
    Truoc khi chen du lieu can kiem tra STU_ID da co san trong bang STUDENT hay chua, neu chua co thi thong bao loi
    hay COURSE_NO da co san trong bang COURSE hay chua, neu chua co thi thong bao loi.
*/
CREATE OR REPLACE PROCEDURE PCD_DangKyMon_KetQua(p_MSSV IN INT, p_COURSE IN CHAR, p_SCORES IN FLOAT)
AS
    PK_REGISTER_COURSE EXCEPTION;
    PRAGMA EXCEPTION_INIT(PK_REGISTER_COURSE, -000001);
    FK_REGISTER_COURSE_STU_ID EXCEPTION;
    PRAGMA EXCEPTION_INIT(FK_REGISTER_COURSE_STU_ID, -02291);
    FK_REGISTER_COURSE_COURSE_NO EXCEPTION;
    PRAGMA EXCEPTION_INIT(FK_REGISTER_COURSE_COURSE_NO, -02292);
BEGIN
    INSERT INTO REGISTER_COURSE(STU_ID,COURSE_NO,SCORES)
        VALUES(p_MSSV,p_COURSE,p_SCORES);
    EXCEPTION
        WHEN PK_REGISTER_COURSE THEN
            DBMS_OUTPUT.PUT_LINE('Sinh vien ma so: ' || p_MSSV || ' nay da dang ky ma mon ' || p_COURSE);
        WHEN FK_REGISTER_COURSE_STU_ID THEN
            DBMS_OUTPUT.PUT_LINE('Ma so sinh vien: ' || p_MSSV || ' nay khong co trong bang STUDENT');
        WHEN FK_REGISTER_COURSE_COURSE_NO THEN
            DBMS_OUTPUT.PUT_LINE('Ma mon hoc: ' || p_COURSE || ' nay khong co trong bang COURSE');
END PCD_DangKyMon_KetQua;
/
EXECUTE PCD_DangKyMon_KetQua(2012021,'PH1003',6.5);
/
/*
    Them so dua vao la COURSE_NO, PREREQUISITE_NO
    Truoc khi chen du lieu can kiem tra COURSE_NO va PREREQUISITE_NO da co san trong bang COURSE hay chua, neu chua co thi thong bao loi.
*/
CREATE OR REPLACE PROCEDURE PCD_ThemMonTienQuyet(p_COURSE IN CHAR, p_PREREQUISITE IN CHAR)
AS
    PK_PREREQUISITE EXCEPTION;
    PRAGMA EXCEPTION_INIT(PK_PREREQUISITE, -000001);
    FK_PREREQUISITE_COURSE_NO EXCEPTION;
    PRAGMA EXCEPTION_INIT(FK_PREREQUISITE_COURSE_NO, -02291);
    FK_PREREQUISITE_PREREQUISITE_NO EXCEPTION;
    PRAGMA EXCEPTION_INIT(FK_PREREQUISITE_PREREQUISITE_NO, -02292);
BEGIN
    INSERT INTO PREREQUISITE(COURSE_NO,PREREQUISITE_NO)
        VALUES(p_COURSE,p_PREREQUISITE);
    EXCEPTION
        WHEN PK_PREREQUISITE THEN
            DBMS_OUTPUT.PUT_LINE('2 mon da co trong bang');
        WHEN FK_PREREQUISITE_COURSE_NO THEN
            DBMS_OUTPUT.PUT_LINE('Ma mon hoc: ' || p_COURSE || ' nay khong co trong bang COURSE');
        WHEN FK_PREREQUISITE_PREREQUISITE_NO THEN
            DBMS_OUTPUT.PUT_LINE('Ma mon hoc: ' || p_PREREQUISITE || ' nay khong co trong bang COURSE');
END PCD_ThemMonTienQuyet;
/
EXECUTE PCD_ThemMonTienQuyet('PH1005','PH1003');
/

----------------Create Trigger-------------
/*
    Tao Trigger de cap nhat lai GPA cua sinh vien khi them, cap nhat va xoa thong tin bang REGISTER_COURSE.
*/
CREATE OR REPLACE TRIGGER TG_CapNhatGPA1
AFTER INSERT OR UPDATE
    ON REGISTER_COURSE
    FOR EACH ROW
DECLARE
    p_GPA FLOAT;
BEGIN
    p_GPA := FT_TinhDiemGPA(:NEW.STU_ID);
    UPDATE STUDENT
    SET GPA = p_GPA
    WHERE STU_ID = :NEW.STU_ID;
    COMMIT;
END TG_CapNhatGPA1;

CREATE OR REPLACE TRIGGER TG_CapNhatGPA2
AFTER DELETE
    ON REGISTER_COURSE
    FOR EACH ROW
DECLARE
    p_GPA FLOAT;
BEGIN
    p_GPA := FT_TinhDiemGPA(:OLD.STU_ID);
    UPDATE STUDENT
    SET GPA = p_GPA
    WHERE STU_ID = :OLD.STU_ID;
    COMMIT;
END TG_CapNhatGPA2;
/
    
----------------Create View-------------
/*
    Tao View gom thong tin nhung sinh vien cua Khoa Khoa hoc va Ky thuat May tinh
*/
CREATE VIEW STUDENT_CSE AS
    SELECT STUDENT.STU_ID, STUDENT.FIRST_NAME, STUDENT.MINIT, STUDENT.LAST_NAME, 
            STUDENT.GRADE, STUDENT.CLASS_NAME, CLASS_STU.HOMEROOM_TEACHER_ID
    FROM STUDENT, CLASS_STU, DEPARTMENT
    WHERE STUDENT.CLASS_NAME = CLASS_STU.CLASS_NAME AND CLASS_STU.DP_NAME = DEPARTMENT.DP_NAME 
    AND DEPARTMENT.DP_NAME = 'Khoa hoc va Ky thuat May tinh';
SELECT *
FROM STUDENT_CSE;
----------------
ALTER TABLE REGISTER_COURSE ADD STATE_COURSE NVARCHAR2(10);
DECLARE
    CURSOR TEMP IS SELECT STU_ID,COURSE_NO,SCORES FROM REGISTER_COURSE;
    p_MSSV INT;
    p_COURSE CHAR(10);
    p_MASK FLOAT;
    p_STATE NVARCHAR2(10);
BEGIN
    OPEN TEMP;
    LOOP
        FETCH TEMP INTO p_MSSV,p_COURSE,p_MASK;
        EXIT WHEN TEMP%NOTFOUND;
        IF (p_MASK <= 10) AND (p_MASK >= 5) THEN
            p_STATE := 'Dat';
        ELSE
            p_STATE := 'Khong Dat';
       END IF;
       UPDATE REGISTER_COURSE
       SET STATE_COURSE = p_STATE
       WHERE STU_ID = p_MSSV AND COURSE_NO = p_COURSE;
    END LOOP;
    CLOSE TEMP;
END;
----------------
/*DROP TABLE TEACHER CASCADE CONSTRAINTS;
DROP TABLE DEPENDENT_STU;
DROP TABLE COURSE_OFFERING;
DROP TABLE REGISTER_COURSE;
DROP TABLE PREREQUISITE;
DROP TABLE STUDENT;
DROP TABLE COURSE;
DROP TABLE CLASS_STU;
DROP TABLE DEPARTMENT;*/
DROP TRIGGER TG_CAPNHATGPA1;
DROP TRIGGER TG_CAPNHATGPA2;


















